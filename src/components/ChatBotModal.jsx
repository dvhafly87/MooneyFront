// ‚úÖ ChatBotModal + ExpensiveJxForm ÌÜµÌï© AI Ï±óÎ¥á Î™®Îã¨
import React, { useEffect, useState } from 'react';
import chatImg from '@img/chatmooney.png';
import DOMPurify from 'dompurify';

export default function ChatBotModal({ onClose }) {
  const [showOptions, setShowOptions] = useState(false);
  const [message, setMessage] = useState('');
  const [chatLog, setChatLog] = useState([
    { from: 'bot', text: 'Ïñ¥ÏÑúÏò§ÏÑ∏Ïöî! Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?' },
  ]);
  const [userinfo, setUserinfo] = useState(null);

  const options = [
    'Ïù¥Î≤àÏ£º ÏßÄÏ∂ú Î∂ÑÏÑù',
    'Ïù¥Î≤àÎã¨ ÏÜåÎπÑ Ìå®ÌÑ¥ Î∂ÑÏÑù',
    'Í≥†Ï†ï ÏßÄÏ∂ú Ìå®ÌÑ¥ Î∂ÑÏÑù',
    'ÏßÄÎÇúÎã¨ ÎåÄÎπÑ Ïù¥Î≤àÎã¨ ÏÜåÎπÑ Ï∂îÏù¥ Î∂ÑÏÑù',
    'Ï£ºÏöî ÏÜåÎπÑÏ≤ò Î∂ÑÏÑù',
    'ÏßÄÎÇúÎã¨ ÎåÄÎπÑ Ïù¥Î≤àÎã¨ ÏßÄÏ∂ú ÎπàÎèÑ Ï∂îÏù¥ Î∂ÑÏÑù',
    'Ïù¥Î≤àÎã¨ Í≥†Ïï° ÏßÄÏ∂úÍ±¥ Î∂ÑÏÑù',
  ];

  useEffect(() => {
    userinfoget();
  }, []);

  const userinfoget = async () => {
    try {
      const savedLoginState = localStorage.getItem('isYouLogined');

      console.log(savedLoginState);

      let parsedState = {};

      if (savedLoginState) {
        parsedState = JSON.parse(savedLoginState);
        console.log(parsedState);
        // Ï∂úÎ†•: { nick: "Í≥†Î®êÎØ∏", id: "hhhh234", point: 0 }

        console.log(parsedState.nick); // Í≥†Î®êÎØ∏
      } else {
        console.log('Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÍ∞Ä Ï†ÄÏû•ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.');
      }

      // const parsedData = {}

      // try {
      //   parsedData = JSON.parse(savedLoginState);
      // } catch (err) {
      //   throw new Error('‚ùå loginUser ÌååÏã± Ïã§Ìå®');
      // }

      // console.log('üü¢ parsedData:', parsedData.id);

      // if (!parsedData?.id) {
      //   throw new Error('‚ùå loginId ÏóÜÏùå');
      // }

      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/do.MeminfoCheck`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          regid: parsedState.id,
        }),
      });

      console.log('lalalalalal', response);

      const result = await response.json();
      console.log('‚úÖ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏùëÎãµ:', result);

      if (!result?.Meminfo) {
        throw new Error('‚ùå ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      }

      setUserinfo(result?.Meminfo);
    } catch (error) {
      console.error('üö® userinfoget Ïò§Î•ò:', error.message);
    }
  };

  const handleSend = async () => {
    if (!message.trim()) return;

    setChatLog((prev) => [...prev, { from: 'user', text: message }]);
    setMessage('');

    const formData = new FormData();
    formData.append('userInput', message);
    formData.append('userinfo', userinfo?.id || 'unknown');

    try {
      const res = await fetch(`${import.meta.env.VITE_API_BASE_URL}/llama3-api`, {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });

      if (res.ok) {
        const result = await res.json();
        const clean = DOMPurify.sanitize(JSON.stringify(result.translation));
        setChatLog((prev) => [...prev, { from: 'bot', text: clean }]);
      } else {
        setChatLog((prev) => [...prev, { from: 'bot', text: `ÏöîÏ≤≠ Ïã§Ìå®: ${res.status}` }]);
      }
    } catch (err) {
      setChatLog((prev) => [...prev, { from: 'bot', text: `ÏóêÎü¨: ${err.message}` }]);
    }
  };

  const toggleOptions = () => setShowOptions((prev) => !prev);

  const handleOptionClick = (text) => {
    setMessage(text);
    setShowOptions(false);
  };

  return (
    <div style={overlayStyle} onClick={onClose}>
      <div style={modalStyle} onClick={(e) => e.stopPropagation()}>
        <div style={{ marginBottom: '16px' }}>
          {chatLog.map((msg, i) => (
            <div
              key={i}
              style={{
                display: 'flex',
                justifyContent: msg.from === 'user' ? 'flex-end' : 'flex-start',
                marginBottom: '12px',
              }}
            >
              {msg.from === 'bot' && (
                <img
                  src={chatImg}
                  alt="mooney"
                  style={{ width: '36px', height: '36px', marginRight: '8px' }}
                />
              )}
              <div
                style={{
                  backgroundColor: msg.from === 'user' ? '#D1E9FF' : '#F0F0F0',
                  padding: '10px 14px',
                  borderRadius: '20px',
                  fontSize: '14px',
                  lineHeight: '1.5',
                  maxWidth: '70%',
                  whiteSpace: 'pre-wrap',
                }}
                dangerouslySetInnerHTML={{ __html: msg.text }}
              />
            </div>
          ))}
        </div>

        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            borderTop: '1px solid #ddd',
            paddingTop: '12px',
          }}
        >
          <button onClick={toggleOptions} style={plusButtonStyle}>
            +
          </button>
          <input
            type="text"
            placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            style={inputStyle}
          />
          <button onClick={handleSend} style={sendButtonStyle}>
            ‚û§
          </button>
        </div>

        {showOptions && (
          <div style={optionsContainerStyle}>
            {options.map((opt, i) => (
              <button key={i} style={optionButtonStyle} onClick={() => handleOptionClick(opt)}>
                {opt}
              </button>
            ))}
          </div>
        )}

        <button onClick={onClose} style={closeButtonStyle}>
          ‚úï
        </button>
      </div>
    </div>
  );
}

// üíÑ Ïä§ÌÉÄÏùºÎì§
const overlayStyle = {
  position: 'fixed',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  backgroundColor: 'rgba(0, 0, 0, 0.4)',
  zIndex: 1000,
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
};

const modalStyle = {
  width: '420px',
  maxHeight: '90vh',
  overflowY: 'auto',
  backgroundColor: '#fff',
  borderRadius: '20px',
  padding: '24px',
  boxShadow: '0 8px 24px rgba(0,0,0,0.3)',
  position: 'relative',
};

const plusButtonStyle = {
  marginRight: '8px',
  width: '36px',
  height: '36px',
  fontSize: '20px',
  fontWeight: 'bold',
  border: '1px solid #ccc',
  borderRadius: '50%',
  backgroundColor: '#f9f9f9',
  cursor: 'pointer',
};

const inputStyle = {
  flex: 1,
  padding: '10px 14px',
  borderRadius: '20px',
  border: '1px solid #ccc',
  fontSize: '14px',
  outline: 'none',
};

const sendButtonStyle = {
  marginLeft: '10px',
  padding: '10px 16px',
  backgroundColor: '#3C82F6',
  color: '#fff',
  border: 'none',
  borderRadius: '20px',
  cursor: 'pointer',
  fontSize: '14px',
};

const optionsContainerStyle = {
  display: 'flex',
  flexWrap: 'wrap',
  gap: '8px',
  marginTop: '16px',
  justifyContent: 'flex-start',
};

const optionButtonStyle = {
  padding: '6px 10px',
  fontSize: '13px',
  backgroundColor: '#f0f0f0',
  borderRadius: '12px',
  border: '1px solid #ccc',
  cursor: 'pointer',
};

const closeButtonStyle = {
  position: 'absolute',
  top: '12px',
  right: '12px',
  background: 'none',
  border: 'none',
  fontSize: '20px',
  cursor: 'pointer',
  color: '#aaa',
};
